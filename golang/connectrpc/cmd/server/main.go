package main

import (
	"context"
	"errors"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"connectrpc.com/connect"
	"connectrpc.com/grpchealth"
	"connectrpc.com/grpcreflect"
	"golang.org/x/net/http2"
	"golang.org/x/net/http2/h2c"
	"google.golang.org/protobuf/reflect/protoregistry"

	greetv1 "mukezhz/connectrpc/gen/idl/greet/v1"        // generated by protoc-gen-go
	"mukezhz/connectrpc/gen/idl/greet/v1/greetv1connect" // generated by protoc-gen-connect-go

	userv1 "mukezhz/connectrpc/gen/idl/user/v1" // generated by protoc-gen-go
	"mukezhz/connectrpc/gen/idl/user/v1/userv1connect"
	// generated by protoc-gen-connect-go
)

type GreetServer struct{}

func validateGreetRequest(req *greetv1.GreetRequest) error {
	if req.Name == "" {
		return fmt.Errorf("Name is required")
	}
	return nil
}

func doSomeWork(ctx context.Context, greet string) error {
	log.Println("Doing some work with greeting: ", greet)
	return nil
}

func (s *GreetServer) Greet(
	ctx context.Context,
	req *connect.Request[greetv1.GreetRequest],
) (*connect.Response[greetv1.GreetResponse], error) {
	log.Println("Request headers: ", req.Header())
	if err := ctx.Err(); err != nil {
		return nil, err
	}
	if err := validateGreetRequest(req.Msg); err != nil {
		return nil, connect.NewError(connect.CodeInvalidArgument, err)
	}

	if err := doSomeWork(ctx, req.Msg.Name); err != nil {
		return nil, connect.NewError(connect.CodeInternal, err)
	}
	res := connect.NewResponse(&greetv1.GreetResponse{
		Greeting: fmt.Sprintf("Hello, %s!", req.Msg.Name),
	})
	res.Header().Set("Greet-Version", "v1")
	return res, nil
}

type UserService struct{}

func (s *UserService) Create(
	ctx context.Context,
	req *connect.Request[userv1.CreateRequest],
) (*connect.Response[userv1.CreateResponse], error) {
	return connect.NewResponse(&userv1.CreateResponse{
		FullName: "full name",
	}), nil
}

func main() {
	greeter := &GreetServer{}
	userService := &UserService{}
	mux := http.NewServeMux()
	compress1KB := connect.WithCompressMinBytes(1024)
	// HEALTHCHECK
	mux.Handle(grpchealth.NewHandler(
		grpchealth.NewStaticChecker(greetv1connect.GreetServiceName),
		compress1KB,
	))

	// REFLECTION
	reflector := grpcreflect.NewReflector(
		grpcreflect.NamerFunc(
			func() []string {
				return []string{
					greetv1connect.GreetServiceName,
					userv1connect.UserServiceName,
				}
			}),
		grpcreflect.WithExtensionResolver(protoregistry.GlobalTypes),
		grpcreflect.WithDescriptorResolver(protoregistry.GlobalFiles),
	)

	mux.Handle(grpcreflect.NewHandlerV1(reflector))
	mux.Handle(grpcreflect.NewHandlerV1Alpha(reflector))

	interceptors := connect.WithInterceptors(NewAuthInterceptor())
	path, handler := greetv1connect.NewGreetServiceHandler(greeter, interceptors)
	mux.Handle(path, handler)
	mux.Handle(userv1connect.NewUserServiceHandler(userService, interceptors))

	log.Println("Listening on :8080")

	srv := &http.Server{
		Addr:    "localhost:8080",
		Handler: h2c.NewHandler(mux, &http2.Server{}),
	}

	signals := make(chan os.Signal, 1)
	signal.Notify(signals, os.Interrupt, syscall.SIGTERM)
	go func() {
		if err := srv.ListenAndServe(); err != nil && !errors.Is(err, http.ErrServerClosed) {
			log.Fatalf("HTTP listen and serve: %v", err)
		}
	}()

	<-signals
	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
	defer cancel()
	if err := srv.Shutdown(ctx); err != nil {
		log.Fatalf("HTTP shutdown: %v", err) //nolint:gocritic
	}
}
