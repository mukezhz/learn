package main

import (
	"context"
	"fmt"
	"log"
	"net/http"

	"connectrpc.com/connect"
	"connectrpc.com/grpcreflect"
	"golang.org/x/net/http2"
	"golang.org/x/net/http2/h2c"
	"google.golang.org/protobuf/reflect/protoregistry"

	greetv1 "mukezhz/connectrpc/gen/greet/v1"        // generated by protoc-gen-go
	"mukezhz/connectrpc/gen/greet/v1/greetv1connect" // generated by protoc-gen-connect-go
)

type GreetServer struct{}

func validateGreetRequest(req *greetv1.GreetRequest) error {
	if req.Name == "" {
		return fmt.Errorf("Name is required")
	}
	return nil
}

func doSomeWork(ctx context.Context, greet string) error {
	log.Println("Doing some work with greeting: ", greet)
	return nil
}

func (s *GreetServer) Greet(
	ctx context.Context,
	req *connect.Request[greetv1.GreetRequest],
) (*connect.Response[greetv1.GreetResponse], error) {
	log.Println("Request headers: ", req.Header())
	if err := ctx.Err(); err != nil {
		return nil, err
	}
	if err := validateGreetRequest(req.Msg); err != nil {
		return nil, connect.NewError(connect.CodeInvalidArgument, err)
	}

	if err := doSomeWork(ctx, req.Msg.Name); err != nil {
		return nil, connect.NewError(connect.CodeInternal, err)
	}
	res := connect.NewResponse(&greetv1.GreetResponse{
		Greeting: fmt.Sprintf("Hello, %s!", req.Msg.Name),
	})
	res.Header().Set("Greet-Version", "v1")
	return res, nil
}

const greetServiceName = "greet.v1.GreetService"

func main() {
	greeter := &GreetServer{}
	mux := http.NewServeMux()

	// REFLECTION
	reflector := grpcreflect.NewReflector(
		grpcreflect.NamerFunc(
			func() []string {
				return []string{greetServiceName}
			}),
		grpcreflect.WithExtensionResolver(protoregistry.GlobalTypes),
		grpcreflect.WithDescriptorResolver(protoregistry.GlobalFiles),
	)

	mux.Handle(grpcreflect.NewHandlerV1(reflector))
	mux.Handle(grpcreflect.NewHandlerV1Alpha(reflector))

	interceptors := connect.WithInterceptors(NewAuthInterceptor())
	path, handler := greetv1connect.NewGreetServiceHandler(greeter, interceptors)
	mux.Handle(path, handler)

	log.Println("Listening on :8080")

	http.ListenAndServe(
		"localhost:8080",
		// Use h2c so we can serve HTTP/2 without TLS.
		h2c.NewHandler(mux, &http2.Server{}),
	)
}
